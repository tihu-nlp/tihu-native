/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf')
var goog = jspb
var global = Function('return this')()

goog.exportSymbol('proto.tihu.Empty', null, global)
goog.exportSymbol('proto.tihu.SpeakReply', null, global)
goog.exportSymbol('proto.tihu.SpeakRequest', null, global)
goog.exportSymbol('proto.tihu.SpeakRequest.Voice', null, global)
goog.exportSymbol('proto.tihu.VersionReply', null, global)

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tihu.Empty = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.tihu.Empty, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.tihu.Empty.displayName = 'proto.tihu.Empty'
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tihu.Empty.prototype.toObject = function (opt_includeInstance) {
    return proto.tihu.Empty.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tihu.Empty} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tihu.Empty.toObject = function (includeInstance, msg) {
    var f,
      obj = {}

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tihu.Empty}
 */
proto.tihu.Empty.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.tihu.Empty()
  return proto.tihu.Empty.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tihu.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tihu.Empty}
 */
proto.tihu.Empty.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tihu.Empty.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.tihu.Empty.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tihu.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tihu.Empty.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
}

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tihu.SpeakRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.tihu.SpeakRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.tihu.SpeakRequest.displayName = 'proto.tihu.SpeakRequest'
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tihu.SpeakRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.tihu.SpeakRequest.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tihu.SpeakRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tihu.SpeakRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        text: jspb.Message.getFieldWithDefault(msg, 1, ''),
        voice: jspb.Message.getFieldWithDefault(msg, 2, 0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tihu.SpeakRequest}
 */
proto.tihu.SpeakRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.tihu.SpeakRequest()
  return proto.tihu.SpeakRequest.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tihu.SpeakRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tihu.SpeakRequest}
 */
proto.tihu.SpeakRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setText(value)
        break
      case 2:
        var value = /** @type {!proto.tihu.SpeakRequest.Voice} */ (reader.readEnum())
        msg.setVoice(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tihu.SpeakRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.tihu.SpeakRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tihu.SpeakRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tihu.SpeakRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getText()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getVoice()
  if (f !== 0.0) {
    writer.writeEnum(2, f)
  }
}

/**
 * @enum {number}
 */
proto.tihu.SpeakRequest.Voice = {
  MBROLA_MALE: 0,
  MBROLA_FEMALE: 1,
  ESPEAK_MALE: 2,
  ESPEAK_FEMALE: 3,
}

/**
 * optional string text = 1;
 * @return {string}
 */
proto.tihu.SpeakRequest.prototype.getText = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/** @param {string} value */
proto.tihu.SpeakRequest.prototype.setText = function (value) {
  jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional Voice voice = 2;
 * @return {!proto.tihu.SpeakRequest.Voice}
 */
proto.tihu.SpeakRequest.prototype.getVoice = function () {
  return /** @type {!proto.tihu.SpeakRequest.Voice} */ (jspb.Message.getFieldWithDefault(
    this,
    2,
    0
  ))
}

/** @param {!proto.tihu.SpeakRequest.Voice} value */
proto.tihu.SpeakRequest.prototype.setVoice = function (value) {
  jspb.Message.setProto3EnumField(this, 2, value)
}

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tihu.SpeakReply = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.tihu.SpeakReply, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.tihu.SpeakReply.displayName = 'proto.tihu.SpeakReply'
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tihu.SpeakReply.prototype.toObject = function (opt_includeInstance) {
    return proto.tihu.SpeakReply.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tihu.SpeakReply} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tihu.SpeakReply.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        wave: msg.getWave_asB64(),
        tags: jspb.Message.getFieldWithDefault(msg, 2, ''),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tihu.SpeakReply}
 */
proto.tihu.SpeakReply.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.tihu.SpeakReply()
  return proto.tihu.SpeakReply.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tihu.SpeakReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tihu.SpeakReply}
 */
proto.tihu.SpeakReply.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes())
        msg.setWave(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setTags(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tihu.SpeakReply.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.tihu.SpeakReply.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tihu.SpeakReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tihu.SpeakReply.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getWave_asU8()
  if (f.length > 0) {
    writer.writeBytes(1, f)
  }
  f = message.getTags()
  if (f.length > 0) {
    writer.writeString(2, f)
  }
}

/**
 * optional bytes wave = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tihu.SpeakReply.prototype.getWave = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(
    this,
    1,
    ''
  ))
}

/**
 * optional bytes wave = 1;
 * This is a type-conversion wrapper around `getWave()`
 * @return {string}
 */
proto.tihu.SpeakReply.prototype.getWave_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getWave()))
}

/**
 * optional bytes wave = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getWave()`
 * @return {!Uint8Array}
 */
proto.tihu.SpeakReply.prototype.getWave_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getWave()))
}

/** @param {!(string|Uint8Array)} value */
proto.tihu.SpeakReply.prototype.setWave = function (value) {
  jspb.Message.setProto3BytesField(this, 1, value)
}

/**
 * optional string tags = 2;
 * @return {string}
 */
proto.tihu.SpeakReply.prototype.getTags = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}

/** @param {string} value */
proto.tihu.SpeakReply.prototype.setTags = function (value) {
  jspb.Message.setProto3StringField(this, 2, value)
}

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tihu.VersionReply = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.tihu.VersionReply, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.tihu.VersionReply.displayName = 'proto.tihu.VersionReply'
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tihu.VersionReply.prototype.toObject = function (opt_includeInstance) {
    return proto.tihu.VersionReply.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tihu.VersionReply} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tihu.VersionReply.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        version: jspb.Message.getFieldWithDefault(msg, 1, ''),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tihu.VersionReply}
 */
proto.tihu.VersionReply.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.tihu.VersionReply()
  return proto.tihu.VersionReply.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tihu.VersionReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tihu.VersionReply}
 */
proto.tihu.VersionReply.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setVersion(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tihu.VersionReply.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.tihu.VersionReply.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tihu.VersionReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tihu.VersionReply.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getVersion()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
}

/**
 * optional string version = 1;
 * @return {string}
 */
proto.tihu.VersionReply.prototype.getVersion = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/** @param {string} value */
proto.tihu.VersionReply.prototype.setVersion = function (value) {
  jspb.Message.setProto3StringField(this, 1, value)
}

goog.object.extend(exports, proto.tihu)
